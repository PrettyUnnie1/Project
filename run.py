# run.py
import sys
import os
import subprocess
from PyQt5.QtWidgets import (
    QApplication,
    QMainWindow,
    QVBoxLayout,
    QHBoxLayout,
    QTextEdit,
    QLineEdit,
    QPushButton,
    QWidget,
)
from PyQt5.QtCore import Qt
from datetime import datetime
from sentiment_analyzer import SentimentAnalyzer  # Import the sentiment analyzer

class ChatBox(QMainWindow):
    def __init__(self):
        super().__init__()

        # Initialize the sentiment analyzer
        self.sentiment_analyzer = SentimentAnalyzer()

        # Thi·∫øt l·∫≠p c·ª≠a s·ªï ch√≠nh
        self.setWindowTitle("Chat Box")
        self.setGeometry(100, 100, 400, 500)

        # T·∫°o widget ch√≠nh
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        # T·∫°o layout ch√≠nh
        self.layout = QVBoxLayout()
        self.central_widget.setLayout(self.layout)

        # Khung hi·ªÉn th·ªã tin nh·∫Øn
        self.chat_display = QTextEdit()
        self.chat_display.setReadOnly(True)
        self.layout.addWidget(self.chat_display)

        # Khung nh·∫≠p li·ªáu v√† n√∫t g·ª≠i
        input_layout = QHBoxLayout()
        self.message_input = QLineEdit()
        self.message_input.setPlaceholderText("Nh·∫≠p tin nh·∫Øn...")
        input_layout.addWidget(self.message_input)

        self.send_button = QPushButton("G·ª≠i")
        input_layout.addWidget(self.send_button)

        self.layout.addLayout(input_layout)

        # K·∫øt n·ªëi s·ª± ki·ªán
        self.send_button.clicked.connect(self.send_message)
        self.message_input.returnPressed.connect(self.send_message)

    def send_message(self):
        """H√†m x·ª≠ l√Ω khi g·ª≠i tin nh·∫Øn."""
        user_message = self.message_input.text().strip()  # L·∫•y n·ªôi dung trong khung chat
        if user_message:
            # Hi·ªÉn th·ªã tin nh·∫Øn trong khung chat
            self.chat_display.append(f"B·∫°n: {user_message}")
            # Ghi tin nh·∫Øn v√†o file
            self.save_message_to_file("B·∫°n", user_message)
            # X√≥a n·ªôi dung trong khung nh·∫≠p
            self.message_input.clear()

            # Ph√¢n t√≠ch c·∫£m x√∫c c·ªßa tin nh·∫Øn ng∆∞·ªùi d√πng
            sentiment = self.sentiment_analyzer.analyze(user_message)

            # T·∫°o ph·∫£n h·ªìi d·ª±a tr√™n c·∫£m x√∫c
            bot_reply = self.generate_bot_reply(sentiment)
            self.chat_display.append(f"Bot: {bot_reply}\n")
            self.save_message_to_file("Bot", bot_reply)

    def generate_bot_reply(self, sentiment):
        """T·∫°o ph·∫£n h·ªìi c·ªßa bot d·ª±a tr√™n c·∫£m x√∫c."""
        if sentiment == "Positive":
            return "Positive! üòä"
        elif sentiment == "Negative":
            return "Negative. üòî"
        elif sentiment == "Mixed":
            return "Mixed! ü§î"
        elif sentiment == "Neutral":
            return "Neutral. üòä"
        else:
            return "I don't understand your emotion. ü§∑‚Äç‚ôÇÔ∏è"

    def save_message_to_file(self, sender, message):
        """L∆∞u tin nh·∫Øn v√†o file txt."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open("chat_log.txt", "a", encoding="utf-8") as file:
            file.write(f"{timestamp} - {sender}: {message}\n")

def generate_antlr_to_python():
    """Function to generate ANTLR Lexer, Parser, and Listener."""
    # Define paths
    DIR = os.path.dirname(os.path.abspath(__file__))
    ANTLR_JAR = r'D:\antlr\antlr4-4.9.2-complete.jar'
    CPL_Dest = 'CompiledFiles'
    SRC = 'Sample.g4'

    print('Running ANTLR4...')
    cmd = [
        'java',
        '-jar',
        ANTLR_JAR,
        '-o',
        CPL_Dest,
        '-Dlanguage=Python3',
        SRC
    ]
    result = subprocess.run(cmd, capture_output=True, text=True)
    if result.returncode == 0:
        print('ANTLR4 generated Lexer, Parser, and Listener successfully.')
    else:
        print('Error generating Lexer, Parser, and Listener:')
        print(result.stderr)
    print('-----------------------------------------------')

def main():
    # Check if 'CompiledFiles' directory exists
    if not os.path.exists('CompiledFiles'):
        print("CompiledFiles directory not found. Generating ANTLR files...")
        generate_antlr_to_python()
    
    # Initialize and run the PyQt5 application
    app = QApplication(sys.argv)
    window = ChatBox()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
